/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   free.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/23 21:34:52 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/24 17:24:18 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	super_duper_hiper_free(int chama)
{
	t_base_value *valor;
	(void)chama;
	valor = value();
	if (!valor)
		return;

	if (valor->stack)
	{
		if (valor->stack->stack_a)
		{
			free(valor->stack->stack_a);
			valor->stack->stack_a = NULL;
		}
		if (valor->stack->stack_b)
		{
			free(valor->stack->stack_b);
			valor->stack->stack_b = NULL;
		}
		free(valor->stack);
		valor->stack = NULL;
	}
	exit(0);
	// exit(chama);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   goated_split.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/24 16:44:26 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/24 16:51:00 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static int	count_words(const char *s, char c)
{
	if (!*s)
		return (0);
	while (*s == c)
		s++;
	if (!*s)
		return (0);
	while (*s && *s != c)
		s++;
	return (1 + count_words(s, c));
}

static char	**split_recursive(const char *s, char c, char **arr, int i)
{
	int len = 0;

	while (*s == c)
		s++;
	if (!*s)
	{
		arr[i] = NULL;
		return (arr);
	}
	while (s[len] && s[len] != c)
		len++;
	arr[i] = ft_substr(s, 0, len);
	if (!arr[i])
	{
		while (--i >= 0)
			free(arr[i]);
		free(arr);
		return (NULL);
	}
	return (split_recursive(s + len, c, arr, i + 1));
}

char	**ft_split(const char *s, char c)
{
	char	**arr;

	if (!s)
		return (NULL);
	arr = malloc((count_words(s, c) + 1) * sizeof(char *));
	if (!arr)
		return (NULL);
	return (split_recursive(s, c, arr, 0));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   indexing.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/19 10:43:20 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/25 13:03:24 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

long	*copy_array(t_base_value *value)
{
	int		i;
	long	*copy;

	i = 0;
	copy = malloc(sizeof(long) * value->stack->stack_a_length);
	if (!copy)
		return (super_duper_hiper_free(1), NULL);
	while (i < value->stack->stack_a_length)
	{
		copy[i] = value->stack->stack_a[i];
		i++;
	}
	return (copy);
}

long	*quick_sort(t_base_value *value)
{
	long	*sorted;
	int		i;
	long	temp;

	sorted = copy_array(value);
	i = 0;
	if (!sorted)
		return (free(sorted), super_duper_hiper_free(1), NULL);
	while (i < value->stack->stack_a_length - 1)
	{
		if (sorted[i] > sorted[i + 1])
		{
			temp = sorted[i];
			sorted[i] = sorted[i + 1];
			sorted[i + 1] = temp;
			i = 0;
		}
		else
			i++;
	}
	return (sorted);
}
int index_it(t_base_value *value)
{
    long *sorted;
    long *copied;
    int i, j;

    sorted = quick_sort(value);
    copied = copy_array(value);
    if (!sorted || !copied)
        return (free(sorted), free(copied), super_duper_hiper_free(1), 0);
    i = 0;
    while (i < value->stack->stack_a_length)
    {
        j = 0;
        while (j < value->stack->stack_a_length)
        {
            if (copied[i] == sorted[j])
            {
                copied[i] = j;
                break;
            }
            j++;
        }
        i++;
    }
    i = 0;
    while (i < value->stack->stack_a_length)
    {
        value->stack->stack_a[i] = copied[i];
        i++;
    }
    free(sorted);
    free(copied);
    return (1);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   operations.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/15 10:46:18 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/26 12:06:41 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	push_elements(long *src, long *dest, t_stack *stack, int which)
{
	int		i;
	long	*src_size;
	long	*dest_size;

	if (which && stack->stack_a_length == 0)
		return ;
	if (!which && stack->stack_b_length == 0)
		return ;
	src_size = which ? &stack->stack_a_length : &stack->stack_b_length;
	dest_size = which ? &stack->stack_b_length : &stack->stack_a_length;
	i = *dest_size;
	while (i > 0)
	{
		dest[i] = dest[i - 1];
		i--;
	}
	dest[0] = src[0];
	(*dest_size)++;
	i = 0;
	while (i < *src_size - 1)
	{
		src[i] = src[i + 1];
		i++;
	}
	(*src_size)--;
	if (which == 1)
		ft_printf("pb\n");
	else
		ft_printf("pa\n");
}

int	single_swap(long *stk_x, long len)
{
	long	temp;

	if (!stk_x || len < 2)
		return (ft_printf("Error\nSwap"), 0);
	temp = stk_x[0];
	stk_x[0] = stk_x[1];
	stk_x[1] = temp;
	return (1);
}

void	double_swap(t_stack *stack)
{
	if (stack->stack_a_length < 2)
	{
		ft_printf("Stack_a ta vazio\n");
		return ;
	}
	if (stack->stack_b_length < 2)
	{
		ft_printf("Stack_b ta vazio\n");
		return ;
	}
	single_swap(stack->stack_a, stack->stack_a_length);
	single_swap(stack->stack_b, stack->stack_b_length);
	ft_printf("ss\n");
}

void	single_rotate(long *stk_x, t_stack *stack, int which)
{
	long	i;
	long	temp;
	long	len;

	len = which == 1 ? stack->stack_a_length : stack->stack_b_length; // FIXED
	if (len < 2)
		return ;
	temp = stk_x[0];
	i = 0;
	while (i < len - 1)
	{
		stk_x[i] = stk_x[i + 1];
		i++;
	}
	stk_x[len - 1] = temp;
	if (which == 0)
		ft_printf("ra\n");
	else
		ft_printf("rb\n");
}

void	double_rotate(t_stack *stack)
{
	if (stack->stack_a_length < 2)
	{
		ft_printf("Stack_a ta vazio\n");
		return ;
	}
	if (stack->stack_b_length < 2)
	{
		ft_printf("Stack_b ta vazio\n");
		return ;
	}
	single_rotate(stack->stack_a, stack, 0);
	single_rotate(stack->stack_b, stack, 1);
	ft_printf("rr\n");
}

void	reverse_rotate(long *stk_x, t_stack *stack, int which)
{
	int		i;
	long	temp;
	long	len;

	len = (which == 0) ? stack->stack_a_length : stack->stack_b_length;
	if (len < 2)
		return ;
	temp = stk_x[len - 1];
	i = len - 1;
	while (i > 0)
	{
		stk_x[i] = stk_x[i - 1];
		i--;
	}
	stk_x[0] = temp;
	if (which == 0)
		ft_printf("rra\n");
	else
		ft_printf("rrb\n");
}

void	double_reverse_rotate(t_stack *stack)
{
	reverse_rotate(stack->stack_a, stack, 0);
	reverse_rotate(stack->stack_b, stack, 1);
	ft_printf("rrr\n");
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parsing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/14 13:28:39 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/26 08:20:48 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

int	find_repetitive(int argc, char *argv[])
{
	int		i;
	int		j;
	long	num_i;
	long	num_j;

	i = 1;
	while (i < argc)
	{
		num_i = ft_atol(argv[i]);
		if (num_i > INT_MAX || num_i < INT_MIN)
			return (ft_printf(TWO_BIG), 0);
		j = i + 1;
		while (j < argc)
		{
			num_j = ft_atol(argv[j]);
			if (num_i == num_j)
				return (ft_printf("Error\n"), 0);
			j++;
		}
		i++;
	}
	return (1);
}

int	check_stat(t_base_value *value)
{
	if (!value->stack || value->stack->stack_a_length < 1)
		return (0);
	return (1);
}

int	already_sorted(t_base_value *value)
{
	int			i;
	static int	warn;
	long		*sorted;
	i = 0;
	sorted = quick_sort(value);
	while (i < value->stack->stack_a_length)
	{
		if (sorted[i] != value->stack->stack_a[i])
			warn++;
		i++;
	}
	if (warn == 0)
		return (free(sorted), 0);
	free(sorted);
	return (1);
}

int str_nonum(const char *str)
{
	int i = 0;
	if (str[i] == '-' || str[i] == '+')
		i++;
	if (!str[i])
		return (0);
	while (str[i])
	{
		if (str[i] < '0' || str[i] > '9')
			return (0);
		i++;
	}
	return (1);
}

int nbr_nonum(int argc, char *argv[])
{
	int i;
	int	j;

	i = 1;
	while (i < argc)
	{
		j = 0;
		while (argv[i][j])
		{
			if (!((argv[i][j] >= '0' && argv[i][j] <= '9') || argv[i][j] == ' ' || argv[i][j] == '+' || argv[i][j] == '-'))
				return(ft_printf("Error\n"), 0);
			j++;
		}
		i++;
	}
	return (1);
}


int	sentence(int argc, char **argv, t_base_value *value)
{
	int i = 0;

	if (!nbr_nonum(argc, argv))
		return (0);
	if (!ft_strchr(argv[1], ' '))
		return (0);
	if (argv[1][2] == '\0' || argv[1][1] == '\0')
		return (0);
	value->splited = ft_split(argv[1], ' ');
	if (!value->splited)
		return (0);
	while (value->splited[i])
		i++;
	value->stack->stack_a_length = i;
	value->stack->stack_b_length = 0;
	value->stack->stack_a = malloc(sizeof(long) * i);
	value->stack->stack_b = malloc(sizeof(long) * i);
	if (!value->stack->stack_a || !value->stack->stack_b)
		return (free(value->stack->stack_a), free(value->stack->stack_b), free(value->stack), 0);
	for (int j = 0; j < i; j++)
		{
			if (!str_nonum(value->splited[j]))
				return (ft_printf("Error\n"), super_duper_hiper_free(1), exit(1), 0);
			value->stack->stack_a[j] = ft_atol(value->splited[j]);
		}
	index_it(value);
	if (i == 5)
	{
		sort_five(value);
		print_stack("stack_a: ", value->stack->stack_a, value->stack->stack_a_length);
		super_duper_hiper_free(1); // Free right after
		exit(0); // Stop program after sorting
	}
	if (i == 3)
	{
		sort_three(value);
		super_duper_hiper_free(1); // Free right after
		exit(0); // Stop program after sorting
	}
	return (1);
}

int	parsing(int argc, char *argv[], t_base_value *value)
{
	if (argc < 1)
		return (1);
	if (!nbr_nonum(argc, argv))
		return (super_duper_hiper_free(1), 0);
	if (argc == 1)
		return (0);
	if (!find_repetitive(argc, argv))
		return (super_duper_hiper_free(1), 0);
	if (!check_stat(value))
		return (super_duper_hiper_free(1), 0);
	if (!already_sorted(value))
		return (super_duper_hiper_free(1), 0);
	
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   radix.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/19 12:36:29 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/21 17:48:30 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	radix_sort(t_base_value *value)
{
	int	bit;
	int	count;
	int	i;

	bit = 0;
	while (bit < value->max_digits)
	{
		i = 0;
		count = value->stack->stack_a_length;
		while (i < count)
		{
			if (((value->stack->stack_a[0] >> bit) & 1) == 0)
				push_elements(value->stack->stack_a, value->stack->stack_b,
					value->stack, 1);
			else
				single_rotate(value->stack->stack_a, value->stack, 1);
			i++;
		}
		while (value->stack->stack_b_length > 0)
			push_elements(value->stack->stack_b, value->stack->stack_a,
				value->stack, 0);
		bit++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   push_swap.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/12 22:06:40 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/26 08:27:19 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PUSH_SWAP_H
# define PUSH_SWAP_H
# include "./my_printf/ft_printf.h"
# include <limits.h>
# include <stdbool.h>
# include <stdio.h>
# include <stdlib.h>
# include <string.h>
# include <unistd.h>
# include <strings.h>
# define TWO_BIG "Error\n"

typedef struct s_stack
{
	long		*stack_a;
	long		*stack_b;
	long		stack_a_length;
	long		stack_b_length;
}				t_stack;

typedef struct s_base_values
{
	long		max_digits;
	long		received_number;
	char		**splited;
	t_stack		*stack;
}				t_base_value;

int				find_repetitive(int argc, char *argv[]);
int				parsing(int argc, char *argv[], t_base_value *value);
int				ft_strcmp(char *s1, char *s2);
int				minimum_len(long *stk);
int	check_stat(t_base_value *value);
int	single_swap(long *stk_x, long len);
int				index_it(t_base_value *value);
int				get_most_digits(int argc, t_base_value *value,
					long *max_digits);
void			print_stuff(int argc, char *argv[], t_base_value *print);
long			ft_atol(char *str);
long			count_digits(long nb);

void			push_elements(long *src, long *dest, t_stack *stack, int which);
void			double_swap(t_stack *stack);
void			single_rotate(long *stk_x, t_stack *stack, int which);
void			double_rotate(t_stack *stack);
void			reverse_rotate(long *stk_x, t_stack *stack, int which);
void			double_reverse_rotate(t_stack *stack);
void			print_stack(const char *name, long *stack, int size);
long			*copy_array(t_base_value *value);
long			*quick_sort(t_base_value *value);
void			radix_sort(t_base_value *value);
void	super_duper_hiper_free(int chama);
t_base_value	*value(void);
char	*ft_substr(char const *s, unsigned int start, size_t len);
char	**ft_split(const char *s, char c);
int	sentence(int argc, char **argv, t_base_value *value);
char	*ft_strchr(const char *s, int c);
void sort_five(t_base_value *value);
int str_nonum(const char *str);
int nbr_nonum(int argc, char *argv[]);
void sort_three(t_base_value *value);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/12 22:06:05 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/26 12:09:09 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

t_base_value	*value(void)
{
	static t_base_value	value;

	return (&value);
}

long	ft_atol(char *str)
{
	int		i;
	long	result;
	long	sign;

	i = 0;
	result = 0;
	sign = 1;
	if (!str)
		return (0);
	while ((str[i] >= 9 && str[i] <= 13) || str[i] == 32)
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		result = result * 10 + (str[i] - '0');
		i++;
	}
	return (result * sign);
}

long	count_digits_loser(long nb)
{
	long	count;

	count = 1;
	if (nb <= 9)
		return (count);
	while (nb >= 10)
	{
		nb /= 10;
		count++;
	}
	return (count);
}
long	count_digits(long nb)
{
	long	count;

	count = 1;
	if (nb <= 9)
		return (count);
	while (nb >= 10)
	{
		nb /= 10;
		count++;
	}
	return (count);
}

int	get_most_digits(int argc, t_base_value *value, long *max_digits)
{
	int		i;
	long	digits;

	i = 0;
	*max_digits = count_digits(value->stack->stack_a[i]);
	while (++i < argc - 1)
	{
		digits = count_digits(value->stack->stack_a[i]);
		if (*max_digits < digits)
			*max_digits = digits;
	}
	return (int)(*max_digits);
}

int	ft_strcmp(char *s1, char *s2)
{
	int	i;

	i = 0;
	if (!s1 || !s2)
		return (0);
	while (s1[i] && s2[i])
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
		i++;
	}
	return (s1[i] - s2[i]);
}

void	print_stuff(int argc, char *argv[], t_base_value *print)
{
	int	i;

	i = 1;
	(void)print;
	if (argc >= 2)
	{
		while (i < argc)
		{
			ft_printf("Digits: %ld\t| Argv[%d]: %ld\n",
				count_digits_loser(ft_atol(argv[i])), i, ft_atol(argv[i]));
			i++;
		}
	}
}

void	print_stack(const char *name, long *stack, int size)
{
	ft_printf("%s", name);
	for (int i = 0; i < size; i++)
		ft_printf("[%ld] ", stack[i]);
	ft_printf("\n");
}

int	minimum_len(long *stk)
{
	if (!stk)
		return (0);
	if (stk[0] && stk[1])
		return (2);
	if (stk[0])
		return (1);
	return (0);
}

char	*ft_substr(char const *value, unsigned int start, size_t len)
{
	char			*str;
	unsigned int	i;
	unsigned int	j;

	if (!value)
		return (NULL);
	if (start > ft_strlen(value))
		return (ft_strdup(""));
	if (ft_strlen(value + start) < len)
		len = ft_strlen(value + start);
	str = (char *)malloc(sizeof(char) * (len + 1));
	if (!str)
		return (NULL);
	i = start;
	j = 0;
	while (value[i] && j < len)
	{
		str[j] = value[i];
		j++;
		i++;
	}
	str[j] = '\0';
	return (str);
}

char	*ft_strchr(const char *value, int c)
{
	int i = 0;
	while (value[i])
	{
		if (value[i] == c)
			return ((char *)&value[i]);
		i++;
	}
	return (NULL);
}

int five_elements(int argc, char *argv[], t_base_value *value)
{
	(void)argc;
	(void)argv;
	value->stack->stack_a_length = 5;
	value->stack->stack_b_length = 0;
	value->stack->stack_a = malloc(sizeof(long) * 5);
	value->stack->stack_b = malloc(sizeof(long) * 5);
	if (!value->stack->stack_a || !value->stack->stack_b)
		return (free(value->stack->stack_a), free(value->stack->stack_b), free(value->stack), 0);
	for (int j = 0; j < 5; j++)
		value->stack->stack_a[j] = ft_atol(value->splited[j]);
	index_it(value);
	return (1);
}

int find_smallest_index(long *arr, int size)
{
	int i = 0;
	int min_i = 0;
	while (i < size)
	{
		if (arr[i] < arr[min_i])
			min_i = i;
		i++;
	}
	return min_i;
}

void sort_five(t_base_value *value)
{
	while (value->stack->stack_a_length > 3)
	{
		int min_index = find_smallest_index(value->stack->stack_a, value->stack->stack_a_length);
		int len = value->stack->stack_a_length;
		if (min_index <= len / 2)
		{
			while (min_index-- > 0)
				single_rotate(value->stack->stack_a, value->stack, 0);
		}
		else
		{
			while (min_index++ < len)
				reverse_rotate(value->stack->stack_a, value->stack, 0);
		}
		push_elements(value->stack->stack_a, value->stack->stack_b, value->stack, 1); // pb
	}
	sort_three(value);
	if (value->stack->stack_b_length == 2 &&
		value->stack->stack_b[0] < value->stack->stack_b[1])
	{
		single_swap(value->stack->stack_b, value->stack->stack_b_length);
		ft_printf("sb\n");
	}
	push_elements(value->stack->stack_b, value->stack->stack_a, value->stack, 0); // pa
	push_elements(value->stack->stack_b, value->stack->stack_a, value->stack, 0); // pa
}

void sort_three(t_base_value *value)
{
	long *a = value->stack->stack_a;

	if (a[0] > a[1] && a[1] < a[2] && a[0] < a[2])
	{
		single_swap(a, 3);
		ft_printf("sa\n");
	}
	else if (a[0] > a[1] && a[1] > a[2])
	{
		single_swap(a, 3);
		ft_printf("sa\n");
		reverse_rotate(a, value->stack, 0);
	}
	else if (a[0] > a[1] && a[1] < a[2] && a[0] > a[2])
	{
		single_rotate(a, value->stack, 0);
	}
	else if (a[0] < a[1] && a[1] > a[2] && a[0] < a[2])
	{
		single_swap(a, 3);
		ft_printf("sa\n");
		single_rotate(a, value->stack, 0);
	}
	else if (a[0] < a[1] && a[1] > a[2] && a[0] > a[2])
		reverse_rotate(a, value->stack, 0);
}
