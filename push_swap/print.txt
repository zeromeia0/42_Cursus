/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/21 20:23:43 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/23 21:16:19 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./ft_printf.h"

static size_t	ft_putnbr_fake(int n)
{
	size_t	count;

	count = 0;
	if (n == 0)
		return (1);
	if (n < 0)
		count++;
	while (n != 0)
	{
		count++;
		n /= 10;
	}
	return (count);
}

char	*ft_itoa(int n)
{
	size_t	digits;
	size_t	i;
	char	*str;
	long	num;

	num = n;
	digits = ft_putnbr_fake(n);
	str = (char *)malloc(digits + 1);
	if (!str)
		return (NULL);
	str[digits] = '\0';
	if (num < 0)
	{
		str[0] = '-';
		num = -num;
	}
	i = digits - 1;
	if (num == 0)
		str[0] = '0';
	while (num > 0)
	{
		str[i--] = (num % 10) + '0';
		num /= 10;
	}
	return (str);
}
static size_t	ft_long_putnbr_fake(long n)
{
	size_t	count;

	count = 0;
	if (n == 0)
		return (1);
	if (n < 0)
		count++;
	while (n != 0)
	{
		count++;
		n /= 10;
	}
	return (count);
}

char	*ft_long_itoa(long n)
{
	size_t	digits;
	size_t	i;
	char	*str;
	long	num;

	num = n;
	digits = ft_long_putnbr_fake(n);
	str = (char *)malloc(digits + 1);
	if (!str)
		return (NULL);
	str[digits] = '\0';
	if (num < 0)
	{
		str[0] = '-';
		num = -num;
	}
	i = digits - 1;
	if (num == 0)
		str[0] = '0';
	while (num > 0)
	{
		str[i--] = (num % 10) + '0';
		num /= 10;
	}
	return (str);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/05 13:51:18 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/23 21:19:58 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FT_PRINTF_H
# define FT_PRINTF_H

# include <stdarg.h>
# include <stdio.h>
# include <stddef.h>
# include <stdlib.h>
# include <string.h>
# include <unistd.h>
# include <limits.h>

# define MAX_UNSIGNED 4294967295
# define HEXA_LOWER_STR "0123456789abcdef"
# define HEXA_UPPER_STR "0123456789ABCDEF"
# define NULL_STR "(null)"
# define NIL_STR "(nil)"

typedef struct s_hexa
{
	int				i;
	int				a;
	int				len;
	int				rem;
	int				count;
	char			buffer1[20];
	char			buffer2[16];
	char			hexa_index[17];
	unsigned int	convert_hexa;
	unsigned int	num_to_unsigned;
	unsigned long	address;
}	t_hexa;

char			*ft_itoa(int n);
size_t			ft_strlen(const char *str);
void			ft_putchar_fd(int a, int fd);
void			ft_putstr_fd(const char *str);
size_t			ft_strlcpy(char *dst, const char *src, size_t dsize);
char			*ft_strdup(const char *s);
int				ft_print_dec_int_number(int nb);
int				ft_print_char(int c);
int				ft_low_hexa(unsigned int num);
int				ft_up_hexa(unsigned int num);
int				ft_print_ptr(void *ptr);
int				ft_print_str(const char *str);
unsigned int	ft_print_unsigned_int(int nb);
int				ft_printf(const char *format, ...);
char			*ft_long_itoa(long n);
long			ft_print_long(long	number);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   libft_functions.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/21 15:16:08 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/13 09:00:05 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./ft_printf.h"

size_t	ft_strlen(const char *str)
{
	size_t	i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}
void	ft_putchar_fd(int a, int fd)
{
	unsigned char	c;

	c = (unsigned char)a;
	write(fd, &c, 1);
}

void	ft_putstr_fd(const char *str)
{
	int	i;

	i = 0;
	while (str[i])
		ft_putchar_fd(str[i++], 1);
}

size_t	ft_strlcpy(char *dst, const char *src, size_t dsize)
{
	size_t	i;

	i = 0;
	if (dsize == 0)
	{
		i = ft_strlen(src);
		return (i);
	}
	while (i < dsize - 1 && src[i])
	{
		dst[i] = src[i];
		i++;
	}
	dst[i] = '\0';
	while (src[i] != '\0')
		i++;
	return (i);
}

char	*ft_strdup(const char *s)
{
	char	*dest;
	int		i;

	i = 0;
	while (s[i])
		i++;
	dest = (char *)malloc(i + 1);
	if (!dest)
		return (NULL);
	i = 0;
	while (s[i] != '\0')
	{
		dest[i] = s[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   printf_utils2.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/26 17:09:56 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/23 21:20:16 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

int	ft_print_str(const char *str)
{
	int	count;

	if (!str)
		return (write(1, NULL_STR, 6));
	count = ft_strlen(str);
	ft_putstr_fd(str);
	return (count);
}

unsigned int	ft_print_unsigned_int(int nb)
{
	unsigned int	unb;
	unsigned int	count;
	int				digit;

	count = 0;
	if (nb < 0)
		unb = MAX_UNSIGNED + nb + 1;
	else
		unb = nb;
	if (unb >= 10)
		count += ft_print_unsigned_int(unb / 10);
	digit = (unb % 10) + '0';
	count += write(1, &digit, 1);
	return (count);
}

int	ft_count(int i, va_list args, const char *key)
{
	int	count;

	count = 0;
	if (key[i] == 'c')
		count += ft_print_char(va_arg(args, int));
	else if (key[i] == 's')
		count += ft_print_str(va_arg(args, char *));
	else if (key[i] == 'd' || key[i] == 'i')
		count += ft_print_dec_int_number(va_arg(args, int));
	else if (key[i] == 'u')
		count += ft_print_unsigned_int(va_arg(args, int));
	else if (key[i] == 'x')
		count += ft_low_hexa(va_arg(args, unsigned int));
	else if (key[i] == 'X')
		count += ft_up_hexa(va_arg(args, unsigned int));
	else if (key[i] == 'p')
		count += ft_print_ptr(va_arg(args, void *));
	else if (key[i] == "ld")
		count += ft_print_long(va_arg(args, long));
	else if (key[i] == '%')
		count += write(1, "%", 1);
	else
	{
		count += write(1, "%", 1);
		count += write(1, &key[i], 1);
	}
	return (count);
}

int	ft_printf_setup(const char *key, va_list args)
{
	int	i;
	int	count;

	i = -1;
	count = 0;
	while (key[++i])
	{
		if (key[i] == '%')
		{
			count += ft_count(i + 1, args, key);
			i++;
		}
		else
			count += write(1, &key[i], 1);
	}
	return (count);
}

int	ft_printf(const char *format, ...)
{
	va_list	args;
	int		count;

	va_start(args, format);
	if (!format)
		return (-1);
	count = ft_printf_setup(format, args);
	if (count < 0)
		return (-1);
	va_end(args);
	return (count);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   printf_utils3.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/23 21:13:12 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/23 21:19:46 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

long	ft_print_long(long	number)
{
	char	*str;
	long	len;

	str = ft_long_itoa(number);
	if (!str)
		return (0);
	len = (write(1, str, ft_strlen(str)));
	free(str);
	return (len);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   printf_utils.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vivaz-ca <vivaz-ca@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/26 17:08:34 by vivaz-ca          #+#    #+#             */
/*   Updated: 2025/06/11 17:36:36 by vivaz-ca         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

int	ft_print_char(int c)
{
	unsigned char	a;

	a = (unsigned char)c;
	return (write(1, &a, 1));
}

int	ft_print_dec_int_number(int nb)
{
	char	*str;
	int		len;

	str = ft_itoa(nb);
	if (!str)
		return (0);
	len = write(1, str, ft_strlen(str));
	free(str);
	return (len);
}

int	ft_low_hexa(unsigned int num)
{
	t_hexa	*v;
	int		count;

	v = malloc(sizeof(t_hexa));
	if (!v)
		return (-1);
	v->i = 0;
	v->count = 0;
	ft_strlcpy(v->hexa_index, HEXA_LOWER_STR, 17);
	v->convert_hexa = num;
	if (v->convert_hexa == 0)
		v->buffer2[v->i++] = v->hexa_index[v->convert_hexa % 16];
	while (v->convert_hexa > 0)
	{
		v->buffer2[v->i++] = v->hexa_index[v->convert_hexa % 16];
		v->convert_hexa /= 16;
	}
	v->i--;
	while (v->i >= 0)
		v->count += write(1, &v->buffer2[v->i--], 1);
	count = v->count;
	free(v);
	return (count);
}

int	ft_up_hexa(unsigned int num)
{
	t_hexa	*v;
	int		count;

	v = malloc(sizeof(t_hexa));
	if (!v)
		return (-1);
	v->i = 0;
	v->count = 0;
	ft_strlcpy(v->hexa_index, HEXA_UPPER_STR, 17);
	v->convert_hexa = num;
	if (v->convert_hexa == 0)
		v->buffer2[v->i++] = v->hexa_index[v->convert_hexa % 16];
	while (v->convert_hexa > 0)
	{
		v->buffer2[v->i++] = v->hexa_index[v->convert_hexa % 16];
		v->convert_hexa /= 16;
	}
	v->i--;
	while (v->i >= 0)
		v->count += write(1, &v->buffer2[v->i--], 1);
	count = v->count;
	free(v);
	return (count);
}

int	ft_print_ptr(void *ptr)
{
	t_hexa	*var;
	int		count;

	if (!ptr)
		return (write(1, NIL_STR, 5));
	var = malloc(sizeof(t_hexa));
	if (!var)
		return (-1);
	var->i = 0;
	var->count = 0;
	ft_strlcpy(var->hexa_index, HEXA_LOWER_STR, 17);
	var->address = (unsigned long)ptr;
	while (var->address > 0)
	{
		var->buffer2[var->i++] = var->hexa_index[var->address % 16];
		var->address /= 16;
	}
	var->count += write(1, "0x", 2);
	while (--var->i >= 0)
		var->count += write(1, &var->buffer2[var->i], 1);
	count = var->count;
	free (var);
	return (count);
}
